
//! Autogenerated weights for `pallet_model_voting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-31, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_model_voting
// --extrinsic=*
// --steps=5
// --repeat=2
// --output=pallets/model-voting/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_model_voting`.
pub trait WeightInfo {
	fn propose() -> Weight;
	fn cast_vote() -> Weight;
	fn execute() -> Weight;
	fn cancel_proposal() -> Weight;
	fn unreserve() -> Weight;
}

/// Weights for `pallet_model_voting` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropCount` (r:1 w:1)
	/// Proof: `SubnetVoting::PropCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:6 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetPaths` (r:1 w:0)
	/// Proof: `Network::SubnetPaths` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:1 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::ActivateProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActivateProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseSubnetNodeMemoryMB` (r:1 w:0)
	/// Proof: `Network::BaseSubnetNodeMemoryMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Proposals` (r:0 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1556`
		//  Estimated: `16608`
		// Minimum execution time: 69_222_000 picoseconds.
		Weight::from_parts(85_847_000, 16608)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:0)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SubnetVoting::NodeVotePremium` (r:1 w:0)
	/// Proof: `SubnetVoting::NodeVotePremium` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::VotesBalance` (r:1 w:1)
	/// Proof: `SubnetVoting::VotesBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Votes` (r:1 w:1)
	/// Proof: `SubnetVoting::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cast_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `718`
		//  Estimated: `4183`
		// Minimum execution time: 90_837_000 picoseconds.
		Weight::from_parts(93_248_000, 4183)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Votes` (r:1 w:0)
	/// Proof: `SubnetVoting::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Quorum` (r:1 w:0)
	/// Proof: `SubnetVoting::Quorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:0 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1188`
		//  Estimated: `4653`
		// Minimum execution time: 90_708_000 picoseconds.
		Weight::from_parts(140_448_000, 4653)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:0 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `616`
		//  Estimated: `4081`
		// Minimum execution time: 22_774_000 picoseconds.
		Weight::from_parts(26_439_000, 4081)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:0)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::VotesBalance` (r:1 w:1)
	/// Proof: `SubnetVoting::VotesBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unreserve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `841`
		//  Estimated: `4306`
		// Minimum execution time: 43_200_000 picoseconds.
		Weight::from_parts(44_990_000, 4306)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropCount` (r:1 w:1)
	/// Proof: `SubnetVoting::PropCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:6 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetPaths` (r:1 w:0)
	/// Proof: `Network::SubnetPaths` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:1 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::ActivateProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActivateProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseSubnetNodeMemoryMB` (r:1 w:0)
	/// Proof: `Network::BaseSubnetNodeMemoryMB` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Proposals` (r:0 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1556`
		//  Estimated: `16608`
		// Minimum execution time: 69_222_000 picoseconds.
		Weight::from_parts(85_847_000, 16608)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:0)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SubnetVoting::NodeVotePremium` (r:1 w:0)
	/// Proof: `SubnetVoting::NodeVotePremium` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::VotesBalance` (r:1 w:1)
	/// Proof: `SubnetVoting::VotesBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Votes` (r:1 w:1)
	/// Proof: `SubnetVoting::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cast_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `718`
		//  Estimated: `4183`
		// Minimum execution time: 90_837_000 picoseconds.
		Weight::from_parts(93_248_000, 4183)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Votes` (r:1 w:0)
	/// Proof: `SubnetVoting::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::Quorum` (r:1 w:0)
	/// Proof: `SubnetVoting::Quorum` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:0 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1188`
		//  Estimated: `4653`
		// Minimum execution time: 90_708_000 picoseconds.
		Weight::from_parts(140_448_000, 4653)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:1)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::ActiveProposals` (r:1 w:1)
	/// Proof: `SubnetVoting::ActiveProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::PropsPathStatus` (r:0 w:1)
	/// Proof: `SubnetVoting::PropsPathStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `616`
		//  Estimated: `4081`
		// Minimum execution time: 22_774_000 picoseconds.
		Weight::from_parts(26_439_000, 4081)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `SubnetVoting::Proposals` (r:1 w:0)
	/// Proof: `SubnetVoting::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetVoting::VotesBalance` (r:1 w:1)
	/// Proof: `SubnetVoting::VotesBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unreserve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `841`
		//  Estimated: `4306`
		// Minimum execution time: 43_200_000 picoseconds.
		Weight::from_parts(44_990_000, 4306)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}