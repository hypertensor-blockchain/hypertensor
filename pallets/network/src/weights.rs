
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-31, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_network
// --extrinsic=*
// --steps=5
// --repeat=2
// --output=pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn add_subnet_node() -> Weight;
	fn update_subnet_node() -> Weight;
	fn remove_subnet_node() -> Weight;
	fn add_to_stake() -> Weight;
	fn remove_stake() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `526`
		//  Estimated: `3991`
		// Minimum execution time: 103_861_000 picoseconds.
		Weight::from_parts(108_124_000, 3991)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::RemoveSubnetNodeEpochPercentage` (r:1 w:0)
	/// Proof: `Network::RemoveSubnetNodeEpochPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredNodeConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredNodeConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `798`
		//  Estimated: `4263`
		// Minimum execution time: 40_828_000 picoseconds.
		Weight::from_parts(45_352_000, 4263)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredNodeConsensusInclusionEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredNodeConsensusInclusionEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:4 w:4)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `905`
		//  Estimated: `11795`
		// Minimum execution time: 70_596_000 picoseconds.
		Weight::from_parts(74_846_000, 11795)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1182`
		//  Estimated: `4647`
		// Minimum execution time: 83_708_000 picoseconds.
		Weight::from_parts(84_165_000, 4647)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetAccount` (r:1 w:0)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredUnstakeEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredUnstakeEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1252`
		//  Estimated: `4717`
		// Minimum execution time: 79_106_000 picoseconds.
		Weight::from_parts(81_106_000, 4717)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxAccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxAccountPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountPenaltyCount` (r:1 w:0)
	/// Proof: `Network::AccountPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:1 w:1)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `526`
		//  Estimated: `3991`
		// Minimum execution time: 103_861_000 picoseconds.
		Weight::from_parts(108_124_000, 3991)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:1 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::RemoveSubnetNodeEpochPercentage` (r:1 w:0)
	/// Proof: `Network::RemoveSubnetNodeEpochPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredNodeConsensusSubmitEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredNodeConsensusSubmitEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `798`
		//  Estimated: `4263`
		// Minimum execution time: 40_828_000 picoseconds.
		Weight::from_parts(45_352_000, 4263)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredNodeConsensusInclusionEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredNodeConsensusInclusionEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetAccount` (r:1 w:1)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnets` (r:1 w:1)
	/// Proof: `Network::AccountSubnets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesClasses` (r:4 w:4)
	/// Proof: `Network::SubnetNodesClasses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeAccount` (r:0 w:1)
	/// Proof: `Network::SubnetNodeAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `905`
		//  Estimated: `11795`
		// Minimum execution time: 70_596_000 picoseconds.
		Weight::from_parts(74_846_000, 11795)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxStakeBalance` (r:1 w:0)
	/// Proof: `Network::MaxStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_to_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1182`
		//  Estimated: `4647`
		// Minimum execution time: 83_708_000 picoseconds.
		Weight::from_parts(84_165_000, 4647)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::SubnetAccount` (r:1 w:0)
	/// Proof: `Network::SubnetAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRequiredUnstakeEpochs` (r:1 w:0)
	/// Proof: `Network::MinRequiredUnstakeEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:1 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinStakeBalance` (r:1 w:0)
	/// Proof: `Network::MinStakeBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::LastTxBlock` (r:1 w:1)
	/// Proof: `Network::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TxRateLimit` (r:1 w:0)
	/// Proof: `Network::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalAccountStake` (r:1 w:1)
	/// Proof: `Network::TotalAccountStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1252`
		//  Estimated: `4717`
		// Minimum execution time: 79_106_000 picoseconds.
		Weight::from_parts(81_106_000, 4717)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}